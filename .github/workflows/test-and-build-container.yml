name: Build Docker Image and Run Tests

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install testcontainers-postgres testcontainers-mysql testcontainers-oracle testcontainers-mssql cryptography

      - name: Install Oracle Driver
        run: |
          sudo apt-get update && apt-get install -y --no-install-recommends libpq-dev unixodbc-dev wget unzip libaio1 curl apt-transport-https gnupg2 && rm -rf /var/lib/apt/lists/*
          mkdir -p /opt/oracle
          cd /opt/oracle
          wget https://download.oracle.com/otn_software/linux/instantclient/2113000/instantclient-basic-linux.x64-21.13.0.0.0dbru.zip
          unzip instantclient-basic-linux.x64-21.13.0.0.0dbru.zip
          sudo sh -c "echo /opt/oracle/instantclient_21_13 > /etc/ld.so.conf.d/oracle-instantclient.conf"
          sudo ldconfig

      - name: Install MS SQL Server Driver
        run: |
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo sh -c 'curl -sSL https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list'
          sudo apt-get update
          sudo sh -c 'ACCEPT_EULA=Y apt-get install -y msodbcsql18'
          sudo rm -rf /var/lib/apt/lists/*

      - name: Run Tests
        run: python -m unittest discover tests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Get the commit hash
        id: commit_hash
        run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

      - name: Build and push container
        run: |
          IMAGE_NAME=ghcr.io/drdb-ai/db_hipaa_compliance_report
          COMMIT_HASH=$(echo ${{ steps.commit_hash.outputs.hash }})
          docker buildx build --push --tag $IMAGE_NAME:latest --tag $IMAGE_NAME:$COMMIT_HASH .
